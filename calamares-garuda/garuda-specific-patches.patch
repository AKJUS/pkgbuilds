From d69d5b3933481354c38f07d2faba117033946f92 Mon Sep 17 00:00:00 2001
From: TNE <tne@garudalinux.org>
Date: Sat, 1 Nov 2025 14:38:08 +0100
Subject: [PATCH 1/7] Add ghtcfg module for hardware configuration

---
 src/modules/ghtcfg/ghtcfg.conf |  19 ++++++
 src/modules/ghtcfg/main.py     | 109 +++++++++++++++++++++++++++++++++
 src/modules/ghtcfg/module.desc |   6 ++
 3 files changed, 134 insertions(+)
 create mode 100644 src/modules/ghtcfg/ghtcfg.conf
 create mode 100644 src/modules/ghtcfg/main.py
 create mode 100644 src/modules/ghtcfg/module.desc

diff --git a/src/modules/ghtcfg/ghtcfg.conf b/src/modules/ghtcfg/ghtcfg.conf
new file mode 100644
index 000000000..b4fab398c
--- /dev/null
+++ b/src/modules/ghtcfg/ghtcfg.conf
@@ -0,0 +1,19 @@
+---
+bus:
+    - pci
+#    - usb
+
+identifier:
+    net:
+      - 200
+      - 280
+    video:
+      - 300
+      - 302
+      - 380
+
+driver: free
+
+local: true
+
+repo: /opt/ght/pacman-ght.conf
diff --git a/src/modules/ghtcfg/main.py b/src/modules/ghtcfg/main.py
new file mode 100644
index 000000000..14f351f88
--- /dev/null
+++ b/src/modules/ghtcfg/main.py
@@ -0,0 +1,109 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+#
+# === This file is part of Calamares - <http://github.com/calamares> ===
+#
+#   Copyright 2016, Artoo <artoo@manjaro.org>
+#   Copyright 2016-2019, Philip Müller <philm@manjaro.org>
+#
+#   Calamares is free software: you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation, either version 3 of the License, or
+#   (at your option) any later version.
+#
+#   Calamares is distributed in the hope that it will be useful,
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#   GNU General Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License
+#   along with Calamares. If not, see <http://www.gnu.org/licenses/>.
+
+import libcalamares
+
+from libcalamares.utils import target_env_call, debug
+from os.path import join
+from subprocess import call
+
+
+class GhtController:
+    def __init__(self):
+        self.__root = libcalamares.globalstorage.value("rootMountPoint")
+        self.__bus = libcalamares.job.configuration.get('bus', [])
+        self.__identifier = libcalamares.job.configuration.get(
+            'identifier',
+            []
+            )
+        self.__local = libcalamares.job.configuration['local']
+        self.__repo = libcalamares.job.configuration['repo']
+        self._driver = libcalamares.job.configuration['driver']
+
+    @property
+    def driver(self):
+        return self._driver
+
+    @driver.setter
+    def driver(self, value):
+        self._driver = value
+
+    @property
+    def root(self):
+        return self.__root
+
+    @property
+    def local(self):
+        return self.__local
+
+    @property
+    def repo(self):
+        return self.__repo
+
+    @property
+    def identifier(self):
+        return self.__identifier
+
+    @property
+    def bus(self):
+        return self.__bus
+
+    def umount(self, mp):
+        call(["umount", "-l", join(self.root, mp)])
+
+    def mount(self, mp):
+        call(["mount", "-B", "/" + mp, join(self.root, mp)])
+
+    def rmdir(self, dir):
+        call(["rm", "-Rf", join(self.root, dir)])
+
+    def mkdir(self, dir):
+        call(["mkdir", "-p", join(self.root, dir)])
+
+    def configure(self):
+        cmd = ["garuda-hardware-tool", "--sync", "--noconfirm", "--" + str(self.driver)]
+        if self.local:
+            self.mkdir("opt/ght")
+            self.mount("opt/ght")
+            self.mount("var/lib/ght/db")
+            cmd.extend(["--pacmanconfig", self.repo])
+
+        self.mount("etc/resolv.conf")
+        target_env_call(cmd)
+
+        if self.local:
+            self.umount("opt/ght")
+            self.rmdir("opt/ght")
+            self.umount("var/lib/ght/db")
+        self.umount("etc/resolv.conf")
+
+    def run(self):
+        self.configure()
+
+        return None
+
+
+def run():
+    """ Configuring the hardware """
+
+    ght = GhtController()
+
+    return ght.run()
diff --git a/src/modules/ghtcfg/module.desc b/src/modules/ghtcfg/module.desc
new file mode 100644
index 000000000..dfc0b2cde
--- /dev/null
+++ b/src/modules/ghtcfg/module.desc
@@ -0,0 +1,6 @@
+# Syntax is YAML 1.2
+---
+type:       "job"
+name:       "ghtcfg"
+interface:  "python"
+script:     "main.py"   #assumed relative to the current directory
-- 
2.51.0


From ec2821b02336667c56f3c3004da8d57744a4470b Mon Sep 17 00:00:00 2001
From: TNE <tne@garudalinux.org>
Date: Sat, 1 Nov 2025 14:38:26 +0100
Subject: [PATCH 2/7] grubcfg: Adjust parameters when using plymouth

---
 src/modules/grubcfg/main.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/modules/grubcfg/main.py b/src/modules/grubcfg/main.py
index 346a267cd..77eb0caf0 100644
--- a/src/modules/grubcfg/main.py
+++ b/src/modules/grubcfg/main.py
@@ -171,7 +171,7 @@ def modify_grub_default(partitions, root_mount_point, distributor):
             break
 
     if have_plymouth:
-        use_splash = "splash"
+        use_splash = "quiet splash rd.udev.log_priority=3 vt.global_cursor_default=0"
 
     cryptdevice_params = []
 
-- 
2.51.0


From b4cc7a5b2e8e9de1b4f4d61cec7e142a88b108f9 Mon Sep 17 00:00:00 2001
From: TNE <tne@garudalinux.org>
Date: Sat, 1 Nov 2025 14:38:39 +0100
Subject: [PATCH 3/7] partition: Change cursor color

---
 src/modules/partition/gui/PartitionLabelsView.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/modules/partition/gui/PartitionLabelsView.cpp b/src/modules/partition/gui/PartitionLabelsView.cpp
index b9e315edb..e14066c0a 100644
--- a/src/modules/partition/gui/PartitionLabelsView.cpp
+++ b/src/modules/partition/gui/PartitionLabelsView.cpp
@@ -373,7 +373,7 @@ PartitionLabelsView::drawLabel( QPainter* painter,
                                 const QPoint& pos,
                                 bool selected )
 {
-    painter->setPen( Qt::black );
+    painter->setPen( Qt::white );
     int vertOffset = 0;
     int width = 0;
     for ( const QString& textLine : text )
-- 
2.51.0


From c6c6b3776ff97d4baf7af2753eee80472535bb42 Mon Sep 17 00:00:00 2001
From: TNE <tne@garudalinux.org>
Date: Sat, 1 Nov 2025 14:42:30 +0100
Subject: [PATCH 4/7] Add postcfg module

---
 src/modules/postcfg/main.py      | 113 +++++++++++++++++++++++++++++++
 src/modules/postcfg/module.desc  |   6 ++
 src/modules/postcfg/postcfg.conf |   4 ++
 3 files changed, 123 insertions(+)
 create mode 100644 src/modules/postcfg/main.py
 create mode 100644 src/modules/postcfg/module.desc
 create mode 100644 src/modules/postcfg/postcfg.conf

diff --git a/src/modules/postcfg/main.py b/src/modules/postcfg/main.py
new file mode 100644
index 000000000..49dff73e4
--- /dev/null
+++ b/src/modules/postcfg/main.py
@@ -0,0 +1,113 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+#
+# === This file is part of Calamares - <http://github.com/calamares> ===
+#
+#   Copyright 2014 - 2019, Philip Müller <philm@manjaro.org>
+#   Copyright 2016, Artoo <artoo@manjaro.org>
+#
+#   Calamares is free software: you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation, either version 3 of the License, or
+#   (at your option) any later version.
+#
+#   Calamares is distributed in the hope that it will be useful,
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#   GNU General Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License
+#   along with Calamares. If not, see <http://www.gnu.org/licenses/>.
+
+import libcalamares
+import subprocess
+
+from shutil import copy2
+from distutils.dir_util import copy_tree
+from os.path import join, exists
+from libcalamares.utils import target_env_call
+
+
+class ConfigController:
+    def __init__(self):
+        self.__root = libcalamares.globalstorage.value("rootMountPoint")
+        self.__keyrings = libcalamares.job.configuration.get('keyrings', [])
+
+    @property
+    def root(self):
+        return self.__root
+
+    @property
+    def keyrings(self):
+        return self.__keyrings
+
+    def init_keyring(self):
+        target_env_call(["pacman-key", "--init"])
+
+    def populate_keyring(self):
+        target_env_call(["pacman-key", "--populate"])
+
+    def terminate(self, proc):
+        target_env_call(['killall', '-9', proc])
+
+    def copy_file(self, file):
+        if exists("/" + file):
+            copy2("/" + file, join(self.root, file))
+
+    def copy_folder(self, source, target):
+        if exists("/" + source):
+            copy_tree("/" + source, join(self.root, target))
+
+    def remove_pkg(self, pkg, path):
+        if exists(join(self.root, path)):
+            target_env_call(['pacman', '-R', '--noconfirm', pkg])
+
+    def umount(self, mp):
+        subprocess.call(["umount", "-l", join(self.root, mp)])
+
+    def mount(self, mp):
+        subprocess.call(["mount", "-B", "/" + mp, join(self.root, mp)])
+
+    def rmdir(self, dir):
+        subprocess.call(["rm", "-Rf", join(self.root, dir)])
+
+    def mkdir(self, dir):
+        subprocess.call(["mkdir", "-p", join(self.root, dir)])
+
+    def run(self):
+        self.init_keyring()
+        self.populate_keyring()
+
+        # Remove unneeded ucode
+        cpu_ucode = subprocess.getoutput("hwinfo --cpu | grep Vendor: -m1 | cut -d\'\"\' -f2")
+        if cpu_ucode == "AuthenticAMD":
+            self.remove_pkg("intel-ucode", "boot/intel-ucode.img")
+        elif cpu_ucode == "GenuineIntel":
+            self.remove_pkg("amd-ucode", "boot/amd-ucode.img")
+
+        # Copy skel to root
+        self.copy_folder('etc/skel', 'root')
+
+        # Workaround for pacman-key bug
+        # FS#45351 https://bugs.archlinux.org/task/45351
+        # We have to kill gpg-agent because if it stays
+        # around we can't reliably unmount
+        # the target partition.
+        self.terminate('gpg-agent')
+
+        # create snapper config
+        if exists(join(self.root, "usr/bin/snapper")):
+            target_env_call(["snapper", "-c", "root" "create-config", "/"])
+            target_env_call(["btrfs", "subvolume", "create", "/.snapshots"])
+        
+        target_env_call(["dracut-rebuild"])
+
+        return None
+
+
+def run():
+    """ Misc postinstall configurations """
+
+    config = ConfigController()
+
+    return config.run()
diff --git a/src/modules/postcfg/module.desc b/src/modules/postcfg/module.desc
new file mode 100644
index 000000000..77e9ca4dd
--- /dev/null
+++ b/src/modules/postcfg/module.desc
@@ -0,0 +1,6 @@
+# Syntax is YAML 1.2
+---
+type:       "job"
+name:       "postcfg"
+interface:  "python"
+script:     "main.py"   #assumed relative to the current directory
diff --git a/src/modules/postcfg/postcfg.conf b/src/modules/postcfg/postcfg.conf
new file mode 100644
index 000000000..7ad198f95
--- /dev/null
+++ b/src/modules/postcfg/postcfg.conf
@@ -0,0 +1,4 @@
+---
+keyrings:
+    - archlinux
+    - chaotic
-- 
2.51.0


From ccb8ee3e279234e20e51a072527b8cba15141283 Mon Sep 17 00:00:00 2001
From: TNE <tne@garudalinux.org>
Date: Sat, 1 Nov 2025 14:45:54 +0100
Subject: [PATCH 5/7] bootloader: Remove dependency on partition  module

---
 src/modules/bootloader/module.desc | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/src/modules/bootloader/module.desc b/src/modules/bootloader/module.desc
index 44a1c0ee5..622f0b7d1 100644
--- a/src/modules/bootloader/module.desc
+++ b/src/modules/bootloader/module.desc
@@ -5,6 +5,3 @@ type:       "job"
 interface:  "python"
 name:       "bootloader"
 script:     "main.py"
-# The partition module sets up the EFI firmware type
-# global key, which is used to decide how to install.
-requiredModules: [ "partition" ]
-- 
2.51.0


From c31c916ba8fe4c51ce915a1751febc6c358366e1 Mon Sep 17 00:00:00 2001
From: TNE <tne@garudalinux.org>
Date: Sat, 1 Nov 2025 14:49:57 +0100
Subject: [PATCH 6/7] Add inplacehome module

---
 src/modules/inplacehome/main.py     | 9 +++++++++
 src/modules/inplacehome/module.desc | 5 +++++
 2 files changed, 14 insertions(+)
 create mode 100644 src/modules/inplacehome/main.py
 create mode 100644 src/modules/inplacehome/module.desc

diff --git a/src/modules/inplacehome/main.py b/src/modules/inplacehome/main.py
new file mode 100644
index 000000000..f9dc9daa0
--- /dev/null
+++ b/src/modules/inplacehome/main.py
@@ -0,0 +1,9 @@
+#!/usr/bin/env python3
+import libcalamares
+
+def pretty_name():
+    return "Configuring home subvolume"
+def run():
+    btrfs_subvolumes = libcalamares.globalstorage.value("btrfsSubvolumes")
+    btrfs_subvolumes.append({'mountPoint': '/home', 'subvolume': '/@home'})
+    libcalamares.globalstorage.insert("btrfsSubvolumes", btrfs_subvolumes)
\ No newline at end of file
diff --git a/src/modules/inplacehome/module.desc b/src/modules/inplacehome/module.desc
new file mode 100644
index 000000000..deb89741e
--- /dev/null
+++ b/src/modules/inplacehome/module.desc
@@ -0,0 +1,5 @@
+---
+type: "job"
+interface: "python"
+name: "inplacehome"
+script: "main.py"
\ No newline at end of file
-- 
2.51.0


From a5acf5d03349fe5c58b69e4a9803a35584eca894 Mon Sep 17 00:00:00 2001
From: TNE <tne@garudalinux.org>
Date: Sat, 1 Nov 2025 14:50:04 +0100
Subject: [PATCH 7/7] Add inplace module

---
 src/modules/inplace/main.py     | 43 +++++++++++++++++++++++++++++++++
 src/modules/inplace/module.desc |  5 ++++
 2 files changed, 48 insertions(+)
 create mode 100644 src/modules/inplace/main.py
 create mode 100644 src/modules/inplace/module.desc

diff --git a/src/modules/inplace/main.py b/src/modules/inplace/main.py
new file mode 100644
index 000000000..08d6d4e6e
--- /dev/null
+++ b/src/modules/inplace/main.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+import libcalamares
+import datetime
+import tempfile
+import os
+
+def mount_btrfs_root(mounts, mount_point):
+    for part in mounts:
+        if part.get("mountPoint") == "/" and part.get("fs") == "btrfs":
+            libcalamares.utils.mount(part.get("device"), mount_point, "btrfs", "subvolid=5")
+            break
+
+subvolumes = {
+    '@': '/',
+    '@root': '/root',
+    '@srv': '/srv',
+    '@cache': '/var/cache',
+    '@log': '/var/log',
+    '@tmp': '/var/tmp'
+}
+
+def pretty_name():
+    return "Preparing In-Place Reinstallation"
+def run():
+    libcalamares.utils.warning("a")
+    mounts = libcalamares.job.configuration["mounts"]
+    libcalamares.utils.warning("b")
+    # Write mounts to the global storage directly
+    libcalamares.globalstorage.insert("partitions", mounts)
+    libcalamares.utils.warning("c")
+    
+    # Mount the root partition now
+    mount_point = tempfile.mkdtemp(prefix="calamares-inplace-")
+    libcalamares.utils.warning("d")
+    mount_btrfs_root(mounts, mount_point)
+        
+    subvolume_basename = '_backup_' + datetime.datetime.now().strftime("%Y%d%m%H%M%S")
+    # Rename existing subvolumes
+    for subvol, path in subvolumes.items():
+        subvol_name = f"{subvol}{subvolume_basename}"
+        subvol_path = os.path.join(mount_point, subvol_name)
+        original_subvol_path = os.path.join(mount_point, subvol)
+        os.rename(original_subvol_path, subvol_path)
\ No newline at end of file
diff --git a/src/modules/inplace/module.desc b/src/modules/inplace/module.desc
new file mode 100644
index 000000000..1d1a901e2
--- /dev/null
+++ b/src/modules/inplace/module.desc
@@ -0,0 +1,5 @@
+---
+type: "job"
+interface: "python"
+name: "inplace"
+script: "main.py"
\ No newline at end of file
-- 
2.51.0

